import { incrementHexString, sleep } from "./utils";
const FIRST_SEGMENT_INDEX = '0000000000000000';
export class AsyncQueue {
    constructor(settings = {}) {
        this.isProcessing = false;
        this.inProgressCount = 0;
        this.index = FIRST_SEGMENT_INDEX;
        this.queue = [];
        this.indexed = settings.indexed || false;
        this.waitable = settings.waitable || false;
        this.clearWaitTime = settings.clearWaitTime || 100;
        this.maxParallel = settings.max || 5;
    }
    async processQueue() {
        if (this.inProgressCount >= this.maxParallel)
            return;
        console.warn("Current inProgressCount: ", this.inProgressCount);
        console.warn("Queue length: ", this.queue.length);
        this.isProcessing = true;
        while (this.queue.length > 0) {
            this.inProgressCount = this.inProgressCount + 1;
            const promise = this.queue.shift();
            const action = this.indexed ? () => promise(this.index) : () => promise();
            if (this.waitable) {
                try {
                    await action();
                    this.index = incrementHexString(this.index);
                }
                catch (error) {
                    console.error('Error processing promise:', error);
                    throw error;
                }
                finally {
                    this.inProgressCount = this.inProgressCount - 1;
                }
            }
            else {
                action()
                    .then(() => {
                    this.index = incrementHexString(this.index);
                })
                    .catch((error) => {
                    console.error('Error processing promise:', error);
                })
                    .finally(() => {
                    this.inProgressCount = this.inProgressCount - 1;
                });
            }
        }
        this.isProcessing = false;
    }
    enqueue(promiseFunction) {
        this.queue.push(promiseFunction);
        this.processQueue();
    }
    async clearQueue() {
        this.queue = [];
        while (this.isProcessing || this.inProgressCount > 0) {
            await sleep(this.clearWaitTime);
        }
    }
}
