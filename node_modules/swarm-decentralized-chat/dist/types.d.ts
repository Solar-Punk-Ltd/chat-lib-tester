import { Signature } from "ethers";
import { ETH_ADDRESS_LENGTH } from "./constants";
type FlavoredType<Type, Name> = Type & {
    __tag__?: Name;
};
type HexString<Length extends number = number> = FlavoredType<string & {
    readonly length: Length;
}, 'HexString'>;
export type EthAddress = HexString<typeof ETH_ADDRESS_LENGTH>;
export interface ParticipantDetails {
    nickName: string;
    participant: EthAddress;
    key: string;
    stamp: string;
}
export interface MessageData {
    message: string;
    username: string;
    address: EthAddress;
    timestamp: number;
}
export interface User {
    username: string;
    address: EthAddress;
    timestamp: number;
    signature: Signature;
}
export interface UserActivity {
    [address: EthAddress]: {
        timestamp: number;
        readFails: number;
    };
}
export interface IdleMs {
    [address: EthAddress]: number;
}
export interface UsersFeedCommit {
    users: User[];
    overwrite: boolean;
}
export interface UserWithIndex extends User {
    index: number;
}
export type Sha3Message = string | number[] | ArrayBuffer | Uint8Array;
export {};
//# sourceMappingURL=types.d.ts.map